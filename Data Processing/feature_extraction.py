# -*- coding: utf-8 -*-
"""feature_extraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xLUlu5BixPP8JfkYuxuvKtbHGY7xgTFz
"""

# Feature Engineering - Extracting CNN Features for Drowsiness Detection

# Step 1: Install dependencies
!pip install -q tensorflow opencv-python numpy matplotlib

# Step 2: Import required libraries
import numpy as np
import tensorflow as tf
import cv2
import os
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
import matplotlib.pyplot as plt
from google.colab import drive

# Step 3: Load Preprocessed Data
drive.mount('/content/drive')
DATASET_PATH = "/content/drive/MyDrive/Colab Notebooks/AI Studio/Project/drowsiness_preprocessed.npz"
data = np.load(DATASET_PATH)
X, y = data["X"], data["y"]

print("Loaded preprocessed dataset successfully!")

# Step 4: Load MobileNetV2 as Feature Extractor
base_model = MobileNetV2(weights="imagenet", include_top=False, input_shape=(64, 64, 3))
base_model.trainable = False  # Freeze the model

# Step 5: Extract Features
X_features = base_model.predict(preprocess_input(X))

# Step 6: Flatten Features for Model Training
X_features = X_features.reshape(X_features.shape[0], -1)
print("Feature Extraction Completed! Feature Shape:", X_features.shape)

# Step 7: Save Features for Model Training
FEATURES_PATH = "/content/drive/MyDrive/Colab Notebooks/AI Studio/Project/drowsiness_features.npz"
np.savez(FEATURES_PATH, X=X_features, y=y)

print("Features Saved Successfully at:", FEATURES_PATH)

# Step 8: Display Sample Extracted Features (First 6 Images)
plt.figure(figsize=(10, 5))
for i in range(6):
    plt.subplot(2, 3, i + 1)

    # FIX: Normalize values back to [0, 1] for correct visualization
    img_display = (X[i] - X[i].min()) / (X[i].max() - X[i].min())

    plt.imshow(img_display)  # Show Original Image
    plt.title("Drowsy" if y[i] == 1 else "Awake")
    plt.axis("off")
plt.show()


print("Feature Engineering Completed! Ready for Model Training!")